# Copyright 2022 The IREE Authors
#
# Licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

################################################################################
#                                                                              #
# E2E Test Artifacts Suite                                                     #
#                                                                              #
# Includes the generated cmake files to build the e2e test artifacts.          #
# The cmake files "generated_*.cmake" are generated by the python script:      #
# "build_tools/testing/generate_cmake_e2e_test_artifacts_suite.py" and sould   #
# not be edited manually. Please read README.md for the instructions to update #
# the test artifacts.                                                          #
#                                                                              #
################################################################################

if(NOT IREE_BUILD_E2E_TEST_ARTIFACTS)
  return()
endif()

################################################################################
# Defines the required variables.                                              #
################################################################################
iree_package_name(PACKAGE_NAME)
set(ROOT_ARTIFACTS_DIR "${IREE_BINARY_DIR}/e2e_test_artifacts")

include(generated_e2e_test_fetch_models.cmake)

include(generated_e2e_test_iree_artifacts.cmake)

function(create_sharded_targets source_target shard_count)
  get_target_property(dependencies ${source_target} MANUALLY_ADDED_DEPENDENCIES)
  list(LENGTH dependencies number_of_dependencies)

  foreach(shard_index RANGE 1 ${shard_count})
    set(sharded_target_name "${source_target}-${shard_index}-of-${shard_count}")
    add_custom_target(${sharded_target_name})
    foreach(dep_index RANGE ${shard_index} ${number_of_dependencies} ${shard_count})
      math(EXPR element_index "${dep_index} - 1")
      list(GET dependencies ${element_index} dependency)
      add_dependencies(${sharded_target_name} ${dependency})
    endforeach()
    message("Created sharded target ${sharded_target_name}")
  endforeach()
endfunction()

if ("${IREE_CREATE_E2E_TEST_ARTIFACTS_SHARDED_TARGETS}" GREATER 1)
  set(shard_count ${IREE_CREATE_E2E_TEST_ARTIFACTS_SHARDED_TARGETS})
  message("IREE_CREATE_E2E_TEST_ARTIFACTS_SHARDED_TARGETS is set to ${IREE_CREATE_E2E_TEST_ARTIFACTS_SHARDED_TARGETS} - Creating sharded targets for ${shard_count} shards.")

  create_sharded_targets(iree-benchmark-import-models ${shard_count})
  create_sharded_targets(iree-benchmark-import-models-large ${shard_count})
  create_sharded_targets(iree-benchmark-suites ${shard_count})
  create_sharded_targets(iree-benchmark-suites-large ${shard_count})
  create_sharded_targets(iree-e2e-compile-stats-suites ${shard_count})
  create_sharded_targets(iree-e2e-compile-stats-suites-large ${shard_count})
else()
  message("IREE_CREATE_E2E_TEST_ARTIFACTS_SHARDED_TARGETS is set to ${IREE_CREATE_E2E_TEST_ARTIFACTS_SHARDED_TARGETS} - Not creating sharded targets")
endif()
